{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","win","turn","boxes","Array","fill","undo","message","fillBox","pos","t","m","a","slice","setState","concat","toString","restart","undoBoxes","last","player","his","length","parseInt","substring","onClick","this","bind","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9bb331e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    win: false,\n    turn: true,\n    boxes: Array(9).fill(null),\n    undo: \"\",\n    message: \"X Player Trun\",\n  };\n\n  fillBox = (pos) => {\n    if (!this.state.win) {\n      let a = this.state.boxes.slice();\n      let t, m;\n      if (a[pos] !== \"X\" && a[pos] !== \"O\") {\n        if (this.state.turn === true) {\n          t = \"X\";\n          m = \"O\";\n        } else {\n          t = \"O\";\n          m = \"X\";\n        }\n        a[pos] = t;\n        this.setState({\n          turn: !this.state.turn,\n          boxes: a,\n          undo: this.state.undo.concat(pos.toString()),\n        });\n\n        if (\n          (a[0] === t && a[1] === t && a[2] === t) ||\n          (a[3] === t && a[4] === t && a[5] === t) ||\n          (a[6] === t && a[7] === t && a[8] === t) ||\n          (a[0] === t && a[3] === t && a[6] === t) ||\n          (a[1] === t && a[4] === t && a[7] === t) ||\n          (a[2] === t && a[5] === t && a[8] === t) ||\n          (a[0] === t && a[4] === t && a[8] === t) ||\n          (a[2] === t && a[4] === t && a[6] === t)\n        ) {\n          this.setState({\n            win: true,\n            message: t.concat(\" Player win \"),\n          });\n        } else {\n          this.setState({\n            message: m.concat(\" player Turn\"),\n          });\n        }\n      }\n    }\n  };\n\n  restart = () => {\n    this.setState({\n      win: false,\n      turn: true,\n      boxes: Array(9).fill(null),\n      undo: \"\",\n      message: \"X Player Trun\",\n    });\n  };\n\n  undoBoxes = () => {\n    let a = this.state.boxes.slice();\n    var his = this.state.undo;\n    var last;\n    var player;\n    if (his.length > 0) {\n      last = his[his.length - 1];\n      last = parseInt(last);\n      player = a[last];\n      a[last] = \"\";\n      his = his.substring(0, his.length - 1);\n      this.setState({\n        win: false,\n        turn: !this.state.turn,\n        boxes: a,\n        undo: his,\n        message: player.concat(\" Player Turn\"),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Tic Tac Toe</h1>\n        <table>\n          <tr>\n            <td onClick={this.fillBox.bind(this, \"0\")}>\n              {this.state.boxes[0]}\n            </td>\n            <td className=\"vert\" onClick={this.fillBox.bind(this, \"1\")}>\n              {this.state.boxes[1]}\n            </td>\n            <td onClick={this.fillBox.bind(this, \"2\")}>\n              {this.state.boxes[2]}\n            </td>\n          </tr>\n          <tr>\n            <td className=\"hori\" onClick={this.fillBox.bind(this, \"3\")}>\n              {this.state.boxes[3]}\n            </td>\n            <td className=\"vert hori\" onClick={this.fillBox.bind(this, \"4\")}>\n              {this.state.boxes[4]}\n            </td>\n            <td className=\"hori\" onClick={this.fillBox.bind(this, \"5\")}>\n              {this.state.boxes[5]}\n            </td>\n          </tr>\n          <tr>\n            <td onClick={this.fillBox.bind(this, \"6\")}>\n              {this.state.boxes[6]}\n            </td>\n            <td className=\"vert\" onClick={this.fillBox.bind(this, \"7\")}>\n              {this.state.boxes[7]}\n            </td>\n            <td onClick={this.fillBox.bind(this, \"8\")}>\n              {this.state.boxes[8]}\n            </td>\n          </tr>\n        </table>\n        <div className=\"bDiv\">\n          <h3>{this.state.message}</h3>\n          <button className=\"button restart\" onClick={this.restart}>\n            Restart\n          </button>\n          <button className=\"button undo\" onClick={this.undoBoxes}>\n            Undo\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}